// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using FairPlayShop.DataAccess.Models;
using Microsoft.EntityFrameworkCore;

namespace FairPlayShop.DataAccess.Data;

public partial class FairPlayShopDatabaseContext : DbContext
{
    public FairPlayShopDatabaseContext(DbContextOptions<FairPlayShopDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }

    public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }

    public virtual DbSet<City> City { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Culture> Culture { get; set; }

    public virtual DbSet<Photo> Photo { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<ProductStatus> ProductStatus { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<StateOrProvince> StateOrProvince { get; set; }

    public virtual DbSet<Store> Store { get; set; }

    public virtual DbSet<StoreCustomer> StoreCustomer { get; set; }

    public virtual DbSet<StoreCustomerAddress> StoreCustomerAddress { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRoles>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUsers>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.HasMany(d => d.Role).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRoles",
                    r => r.HasOne<AspNetRoles>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUsers>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasOne(d => d.StateOrProvince).WithMany(p => p.City)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_City_StateOrProvince");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasOne(d => d.Owner).WithMany(p => p.Product)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_AspNetUsers");

            entity.HasOne(d => d.ProductStatus).WithMany(p => p.Product)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_ProductStatus");

            entity.HasOne(d => d.Store).WithMany(p => p.Product)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Store");

            entity.HasOne(d => d.ThumbnailPhoto).WithMany(p => p.Product)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Photo");
        });

        modelBuilder.Entity<ProductStatus>(entity =>
        {
            entity.Property(e => e.ProductStatusId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasOne(d => d.Culture).WithMany(p => p.Resource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Resource_Culture");
        });

        modelBuilder.Entity<StateOrProvince>(entity =>
        {
            entity.HasOne(d => d.Country).WithMany(p => p.StateOrProvince)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StateOrProvince_Country");
        });

        modelBuilder.Entity<Store>(entity =>
        {
            entity.HasOne(d => d.Owner).WithMany(p => p.Store)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Store_AspNetUsers");
        });

        modelBuilder.Entity<StoreCustomer>(entity =>
        {
            entity.HasOne(d => d.Store).WithMany(p => p.StoreCustomer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StoreCustomer_Store");
        });

        modelBuilder.Entity<StoreCustomerAddress>(entity =>
        {
            entity.HasOne(d => d.City).WithMany(p => p.StoreCustomerAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StoreCustomerAddress_City");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}