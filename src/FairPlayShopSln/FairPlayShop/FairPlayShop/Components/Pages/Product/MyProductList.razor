@using FairPlayShop.Common
@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Product
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Localization
@attribute [Route($"{Common.Constants.ApiRoutes.MyProductList}/Store/{{StoreId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<FairPlayShop.Components.Spinners.LoadingIndicator ShowSpinners="@this.IsBusy"></FairPlayShop.Components.Spinners.LoadingIndicator>

<PageTitle>
    @Localizer![MyProductListTextKey]
</PageTitle>
<h3>
    @Localizer![MyProductListTextKey]
</h3>

<QuickGrid ItemsProvider="@ItemsProvider" Pagination="@pagination">
    <PropertyColumn Title="@Localizer![ProductIdTextKey]" Property="@( p => p.ProductId)" Sortable="true" IsDefaultSortColumn="true"></PropertyColumn>
    <PropertyColumn Title="@Localizer![ProductNameTextKey]" Property="@( p => p.Name)" Sortable="true"></PropertyColumn>
    <PropertyColumn Title="@Localizer![QuantityInStockTextKey]" Property="@( p => p.QuantityInStock)" Sortable="true"></PropertyColumn>
    <PropertyColumn Title="@Localizer![SellingPriceTextKey]" Property="@( p => p.SellingPrice)" Format="c" Sortable="true"></PropertyColumn>
    <PropertyColumn Title="@Localizer![AcquisitionCostTextKey]" Property="@( p => p.AcquisitionCost)" Format="c" Sortable="true"></PropertyColumn>
    <PropertyColumn Title="@Localizer![ProfitTextKey]" Property="@( p => p.Profit)" Format="c" Sortable="true"></PropertyColumn>
    <TemplateColumn>
        <button class="btn btn-secondary" @onclick="@(()=>NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{StoreId}/Product/{context.ProductId}"))">Edit Product</button>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination"></Paginator>

@code {
    [Parameter]
    public long StoreId { get; set; }
    [Inject]
    private IProductService? ProductService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [Inject]
    private IStringLocalizer<MyProductList>? Localizer { get; set; }
    private bool IsBusy { get; set; }
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    private PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProvider<ProductModel>? ItemsProvider;
    protected override void OnInitialized()
    {
        ItemsProvider ??= async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            var paginationResult = await this.ProductService!.GetPaginatedMyStoreProductListAsync(this.StoreId,req.StartIndex, this.CancellationTokenSource.Token);
            paginationResult.Items = req.ApplySorting(paginationResult!.Items!.AsQueryable()).ToArray();
            var result = GridItemsProviderResult.From(
            items: paginationResult.Items!,
            totalItemCount: paginationResult!.TotalItems);
            this.IsBusy = false;
            StateHasChanged();
            return result;
        };
    }

    [ResourceKey(defaultValue: "My Product List")]
    public const string MyProductListTextKey = "MyProductListText";
    [ResourceKey(defaultValue: "Product Id")]
    public const string ProductIdTextKey = "ProductIdText";
    [ResourceKey(defaultValue: "Product Name")]
    public const string ProductNameTextKey = "ProductNameText";
    [ResourceKey(defaultValue: "Quantity In Stock")]
    public const string QuantityInStockTextKey = "QuantityInStockText";
    [ResourceKey(defaultValue: "Selling Price")]
    public const string SellingPriceTextKey = "SellingPriceText";
    [ResourceKey(defaultValue: "Acquisition Cost")]
    public const string AcquisitionCostTextKey = "AcquisitionCostText";
    [ResourceKey(defaultValue: "Profit")]
    public const string ProfitTextKey = "ProfitText";
}
