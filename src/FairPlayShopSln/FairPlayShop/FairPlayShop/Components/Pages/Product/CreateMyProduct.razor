@using Blazored.Toast.Services
@using FairPlayShop.Common.Enums
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Product
@using Microsoft.AspNetCore.Authorization
@attribute [Route($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{{StoreId:long}}")]
@attribute [Route($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{{StoreId:long}}/Product/{{ProductId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @nameof(Common.Constants.ApiRoutes.CreateMyProduct)
</PageTitle>
<h3>
    @nameof(Common.Constants.ApiRoutes.CreateMyProduct)
</h3>

<EditForm FormName="frmCreateProduct" Model="@this.CreateProductModel"
          OnValidSubmit="OnValidSubmitAsync" Enhance>
    <div class="mb-3">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.Name)</label>
        <InputText class="form-control" @bind-Value="CreateProductModel!.Name"></InputText>
        <ValidationMessage For="@( () => CreateProductModel!.Name)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.Description)</label>
        <InputTextArea class="form-control" @bind-Value="CreateProductModel!.Description"></InputTextArea>
        <ValidationMessage For="@( () => CreateProductModel!.Description)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.Sku)</label>
        <InputText class="form-control" @bind-Value="CreateProductModel!.Sku"></InputText>
        <ValidationMessage For="@( () => CreateProductModel!.Sku)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.Barcode)</label>
        <InputText class="form-control" @bind-Value="CreateProductModel!.Barcode"></InputText>
        <ValidationMessage For="@( () => CreateProductModel!.Barcode)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.SellingPrice)</label>
        <InputNumber class="form-control" @bind-Value="CreateProductModel!.SellingPrice"></InputNumber>
        <ValidationMessage For="@( () => CreateProductModel!.SellingPrice)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.AcquisitionCost)</label>
        <InputNumber class="form-control" @bind-Value="CreateProductModel!.AcquisitionCost"></InputNumber>
        <ValidationMessage For="@( () => CreateProductModel!.AcquisitionCost)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.QuantityInStock)</label>
        <InputNumber class="form-control" @bind-Value="CreateProductModel!.QuantityInStock"></InputNumber>
        <ValidationMessage For="@( () => CreateProductModel!.QuantityInStock)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateProductModel.ProductStatus)</label>
        <InputSelect class="form-select" @bind-Value="@this.CreateProductModel!.ProductStatus">
            <option value="">Select a Product Status</option>
            @foreach (var singleProductStatus in Enum.GetValues<ProductStatus>())
            {
                <option value="@singleProductStatus">@singleProductStatus.ToString()</option>
            }
        </InputSelect>
        <ValidationMessage For="@( () => CreateProductModel!.ProductStatus)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Thumbnail Image</label>
        <InputFile class="form-control" OnChange="OnThumbnailInputFileChanged"></InputFile>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" type="submit">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public long StoreId { get; set; }
    [Parameter]
    public long? ProductId { get; set; }
    [Inject]
    private IToastService? ToastService { get; set; }
    [Inject]
    private IProductService? ProductService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [SupplyParameterFromForm]
    private CreateProductModel? CreateProductModel { get; set; } = new CreateProductModel();
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.CreateProductModel != null)
        {
            this.CreateProductModel.StoreId = this.StoreId;
            if (this.ProductId != null)
            {
                ProductModel productModel = await this.ProductService!.GetMyProductByIdAsync(this.ProductId.Value, CancellationToken.None);
                this.CreateProductModel!.ProductStatus = productModel.ProductStatus;
                this.CreateProductModel.Sku = productModel.Sku;
                this.CreateProductModel.AcquisitionCost = productModel.AcquisitionCost;
                this.CreateProductModel.Barcode = productModel.Barcode;
                this.CreateProductModel.Description = productModel.Description;
                this.CreateProductModel.Name = productModel.Name;
                this.CreateProductModel.QuantityInStock = productModel.QuantityInStock;
                this.CreateProductModel.SellingPrice = productModel.SellingPrice;
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        this.IsBusy = true;
        await this.ProductService!.CreateMyProductAsync(this.CreateProductModel!, CancellationToken.None);
        this.IsBusy = false;
        this.ToastService!.ShowSuccess(message: "Your product has been saved");
        NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.MyProductList}/Store/{StoreId}");
    }

    private async void OnThumbnailInputFileChanged(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        if (inputFileChangeEventArgs.FileCount == 1)
        {
            int maxFileSizeinMB = 5;
            int maxFileSizeinKB = maxFileSizeinMB * 1024 * 1024;
            var stream = inputFileChangeEventArgs.File.OpenReadStream(maxAllowedSize: maxFileSizeinKB);
            this.CreateProductModel!.PhotoBytes = new byte[stream.Length];
            await stream.ReadAsync(this.CreateProductModel!.PhotoBytes, 0, (int)stream.Length);
            this.CreateProductModel.PhotoName = Path.GetFileName(inputFileChangeEventArgs.File.Name);
            this.CreateProductModel.PhotoFilename = inputFileChangeEventArgs.File.Name;
        }
    }
}
