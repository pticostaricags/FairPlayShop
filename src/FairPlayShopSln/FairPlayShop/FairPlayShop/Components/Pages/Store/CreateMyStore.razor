@using Blazored.Toast.Services
@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.CustomLocalization
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Store
@using FairPlayShop.Models.StoreNameRecommendation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@attribute [Route(Common.Constants.ApiRoutes.CreateMyStore)]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @Localizer![CreateMyStoreTextKey]
</PageTitle>

<h3>
    @Localizer![CreateMyStoreTextKey]
</h3>

<EditForm FormName="frmCreateMyStore" Model="this.CreateStoreModel" OnValidSubmit="OnValidSubmitAsync">
    <div class="mb-3">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="mb-3">
        <label class="mb-3">
            @Localizer![NameTextKey]
        </label>
        <InputText class="form-control" @bind-Value="CreateStoreModel!.Name"></InputText>
        <ValidationMessage For="@( () => CreateStoreModel.Name)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" type="submit">
            @CustomLocalization.GlobalKeysLocalizer.SaveText
        </button>
    </div>
</EditForm>

<EditForm FormName="frmNamesRecommendations" Model="this.StoreNameRecommendationModel" OnValidSubmit="GetRecommendedNamesAsync">
    <div class="mb-3">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="mb-3">
        <label class="form-label">@Localizer![ProductsSeparatedByCommaTextKey]</label>
        <InputText class="form-control" @bind-Value="@StoreNameRecommendationModel!.Products"></InputText>
    </div>
    <div class="mb-3">
        <button class="btn btn-secondary">@Localizer![GetRecommendedNamesTextKey]</button>
    </div>
</EditForm>
@if (this.GeneratedLogoUris?.Length > 0 )
{
    foreach (var singleUri in this.GeneratedLogoUris)
    {
        <img class="img-thumbnail" style="max-height:200px;" src="@singleUri.AbsoluteUri" />
    }
}
@if (!String.IsNullOrWhiteSpace(this.RecommendedNames))
{
    <p>@GlobalKeysLocalizer.ContentGeneratedByAzureOpenAIText</p>
    <p>@((MarkupString)this.RecommendedNames)</p>
}

@code {
    [Inject]
    private IStoreService? StoreService { get; set; }
    [Inject]
    private IStringLocalizer<CreateMyStore>? Localizer { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [Inject]
    private IToastService? ToastService { get; set; }
    [SupplyParameterFromForm(FormName = "frmCreateMyStore")]
    private CreateStoreModel? CreateStoreModel { get; set; } = new CreateStoreModel();
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    [SupplyParameterFromForm(FormName = "frmNamesRecommendations")]
    public CreateStoreNameRecommendationModel? StoreNameRecommendationModel { get; set; } = new();
    private string? RecommendedNames { get; set; }
    private bool IsBusy { get; set; }
    private Uri[]? GeneratedLogoUris { get; set; }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            this.IsBusy = true;
            await this.StoreService!.CreateMyStoreAsync(this.CreateStoreModel!, CancellationTokenSource.Token);
            this.IsBusy = false;
            this.NavigationManager?.NavigateTo(Common.Constants.ApiRoutes.MyStoreList);
        }
        catch (Exception ex)
        {
            this.ToastService!.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
        }
    }

    private async Task GetRecommendedNamesAsync()
    {
        try
        {
            this.IsBusy = true;
            this.RecommendedNames = null;
            this.GeneratedLogoUris = null;
            var productsArray = this.StoreNameRecommendationModel!.Products!.Split(',');
            this.RecommendedNames = await this.StoreService!
            .GetStoreRecommendedNameAsync(productsArray, null,
            this.CancellationTokenSource.Token);
            this.GeneratedLogoUris = await this.StoreService!
            .GetRecommendedLogoAsync(productsArray, cancellationToken: this.CancellationTokenSource.Token);
        }
        catch (Exception ex)
        {
            this.ToastService!.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
        }
    }

    [ResourceKey(defaultValue: "Create My Store")]
    public const string CreateMyStoreTextKey = "CreateMyStoreTextKey";
    [ResourceKey(defaultValue: "Name")]
    public const string NameTextKey = "NamtText";
    [ResourceKey(defaultValue: "Products separated by comma (,)")]
    public const string ProductsSeparatedByCommaTextKey = "ProductsSeparatedByCommaTex";
    [ResourceKey(defaultValue: "Get Recommended Names")]
    public const string GetRecommendedNamesTextKey = "GetRecommendedNamesText";
}
