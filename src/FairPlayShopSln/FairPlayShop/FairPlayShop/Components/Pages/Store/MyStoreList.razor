@implements IAsyncDisposable
@using FairPlayShop.Common
@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Store
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Localization
@using FairPlayShop.Models.Pagination
@attribute [Route(Common.Constants.ApiRoutes.MyStoreList)]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @Localizer![MyStoreListTextKey]
</PageTitle>

<h3>
    @Localizer![MyStoreListTextKey]
</h3>

<div class="grid-container">
    <QuickGrid ItemsProvider="@ItemsProvider" Pagination="@pagination">
        <PropertyColumn Title="@Localizer![StoreIdTextKey]" Property="@( p=> p.StoreId)" Sortable="true"></PropertyColumn>
        <PropertyColumn Title="@Localizer![NameTextKey]" Property="@( p=> p.Name)" Sortable="true"></PropertyColumn>
        <PropertyColumn Title="@Localizer![CustomerCountTextKey]" Property="@( p=> p.CustomerCount)" Sortable="true"></PropertyColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![AddProductsTextKey]">
                <i class="bi bi-bag-plus-fill"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.MyProductList}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![ListProductsTextKey]">
                <i class="bi bi-list-stars"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateMyStoreCustomer}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![AddCustomerTextKey]">
                <i class="bi bi-person-fill-add"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.MyStoreCustomerList}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![ListCustomersTextKey]">
                <i class="bi bi-person-lines-fill"></i>
            </a>

        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateStoreCustomerOrder}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![CreateCustomerOrderTextKey]">
                <i class="bi bi-bag-fill"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.StoreCustomerOrderList}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![StoreCustomerOrderListTextKey]">
                <i class="bi bi-bag-fill"></i>
            </a>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination"></Paginator>
</div>

@code {
    [Inject]
    private IStoreService? StoreService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [Inject]
    private IStringLocalizer<MyStoreList>? Localizer { get; set; }
    private bool IsBusy { get; set; }
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    private PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProvider<StoreModel>? ItemsProvider;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            ItemsProvider ??= async req =>
            {
                this.IsBusy = true;
                StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                {
                    StartIndex = req.StartIndex,
                    SortingItems = req.GetSortByProperties()
                    .Select(p => new SortingItem()
                    {
                        PropertyName = p.PropertyName,
                        SortType = (p.Direction == SortDirection.Ascending) ?
                        SortType.Ascending
                        :
                        SortType.Descending
                    }).ToArray()
            };
                var paginationResult = await this.StoreService!.GetPaginatedMyStoreListAsync(
                    paginationRequest, this.CancellationTokenSource.Token);
                paginationResult.Items = req.ApplySorting(paginationResult!.Items!.AsQueryable()).ToArray();
                var result = GridItemsProviderResult.From(
                items: paginationResult.Items!,
                totalItemCount: paginationResult!.TotalItems);
                this.IsBusy = false;
                StateHasChanged();
                return result;
            };
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.CancellationTokenSource.CancelAsync();
    }

    [ResourceKey(defaultValue: "My Store List")]
    public const string MyStoreListTextKey = "MyStoreListText";
    [ResourceKey(defaultValue: "Add Products")]
    public const string AddProductsTextKey = "AddProductsText";
    [ResourceKey(defaultValue: "List Products")]
    public const string ListProductsTextKey = "ListProductsText";
    [ResourceKey(defaultValue: "Add Customer")]
    public const string AddCustomerTextKey = "AddCustomerText";
    [ResourceKey(defaultValue: "List Customers")]
    public const string ListCustomersTextKey = "ListCustomersText";
    [ResourceKey(defaultValue: "Create Customer Order")]
    public const string CreateCustomerOrderTextKey = "CreateCustomerOrderText";
    [ResourceKey(defaultValue: "Store Id")]
    public const string StoreIdTextKey = "StoreIdText";
    [ResourceKey(defaultValue: "Name")]
    public const string NameTextKey = "NameText";
    [ResourceKey(defaultValue: "Customer Count")]
    public const string CustomerCountTextKey = "CustomerCountText";
    [ResourceKey(defaultValue: "Order List")]
    public const string StoreCustomerOrderListTextKey = "StoreCustomerOrderListText";
}
