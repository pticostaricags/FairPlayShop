@implements IAsyncDisposable
@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Store
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Localization
@attribute [Route(Common.Constants.ApiRoutes.MyStoreList)]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @Localizer![nameof(Common.Constants.ApiRoutes.MyStoreList)].Value.Titleize()
</PageTitle>

<h3>
    @Localizer![nameof(Common.Constants.ApiRoutes.MyStoreList)].Value.Titleize()
</h3>

@if (MyStores != null)
{
    <QuickGrid Items="MyStores">
        <PropertyColumn Property="@( p=> p.StoreId)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@( p=> p.Name)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@( p=> p.CustomerCount)" Sortable="true"></PropertyColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![AddProductsTextKey]">
                <i class="bi bi-bag-plus-fill"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.MyProductList}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![ListProductsTextKey]">
                <i class="bi bi-list-stars"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateMyStoreCustomer}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![AddCustomerTextKey]">
                <i class="bi bi-person-fill-add"></i>
            </a>
        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.MyStoreCustomerList}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![ListCustomersTextKey]">
                <i class="bi bi-person-lines-fill"></i>
            </a>

        </TemplateColumn>
        <TemplateColumn>
            <a href="@($"{Common.Constants.ApiRoutes.CreateStoreCustomerOrder}/Store/{context.StoreId}")"
               data-toggle="tooltip" data-placement="top" title="@Localizer![CreateCustomerOrderTextKey]">
                <i class="bi bi-bag-fill"></i>
            </a>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    [Inject]
    private IStoreService? StoreService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [Inject]
    private IStringLocalizer<MyStoreList>? Localizer { get; set; }
    private IQueryable<StoreModel>? MyStores { get; set; }
    private bool IsBusy { get; set; }
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        this.MyStores = (await this.StoreService!.GetMyStoreListAsync(this.CancellationTokenSource.Token))?.AsQueryable();
        this.IsBusy = false;
    }

    public async ValueTask DisposeAsync()
    {
        await this.CancellationTokenSource.CancelAsync();
    }

    [ResourceKey(defaultValue: "Add Products")]
    public const string AddProductsTextKey = "AddProductsText";
    [ResourceKey(defaultValue: "List Products")]
    public const string ListProductsTextKey = "ListProductsText";
    [ResourceKey(defaultValue: "Add Customer")]
    public const string AddCustomerTextKey = "AddCustomerText";
    [ResourceKey(defaultValue: "List Customers")]
    public const string ListCustomersTextKey = "ListCustomersText";
    [ResourceKey(defaultValue: "Create Customer Order")]
    public const string CreateCustomerOrderTextKey = "CreateCustomerOrderText";
}
