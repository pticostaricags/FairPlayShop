@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Store
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [Route(Common.Constants.ApiRoutes.MyStoreList)]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled:true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @nameof(Common.Constants.ApiRoutes.MyStoreList)
</PageTitle>

<h3>
    @nameof(Common.Constants.ApiRoutes.MyStoreList)
</h3>

@if (MyStores != null)
{
    <QuickGrid Items="MyStores">
        <PropertyColumn Property="@( p=> p.StoreId)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@( p=> p.Name)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@( p=> p.CustomerCount)" Sortable="true"></PropertyColumn>
        <TemplateColumn>
            <button class="btn btn-secondary" type="button" @onclick="@( () => NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.CreateMyProduct}/Store/{context.StoreId}"))">Add Products</button>
        </TemplateColumn>
        <TemplateColumn>
            <button class="btn btn-secondary" type="button" @onclick="@( () => NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.MyProductList}/Store/{context.StoreId}"))">List Products</button>
        </TemplateColumn>
        <TemplateColumn>
            <button class="btn btn-secondary" type="button" @onclick="@( () => NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.CreateMyStoreCustomer}/Store/{context.StoreId}"))">Add Customers</button>
        </TemplateColumn>
        <TemplateColumn>
            <button class="btn btn-secondary" type="button" @onclick="@( () => NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.MyStoreCustomerList}/Store/{context.StoreId}"))">List Customers</button>
        </TemplateColumn>
        <TemplateColumn>
            <button class="btn btn-secondary" type="button" @onclick="@( () => NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.CreateStoreCustomerOrder}/Store/{context.StoreId}"))">Create Customer Order</button>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    [Inject]
    private IStoreService? StoreService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    private IQueryable<StoreModel>? MyStores { get; set; }
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        this.MyStores = (await this.StoreService!.GetMyStoreListAsync(CancellationToken.None))?.AsQueryable();
        this.IsBusy = false;
    }
}
