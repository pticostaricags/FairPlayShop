@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Store
@using FairPlayShop.Models.StoreCustomer
@using FairPlayShop.Models.StoreCustomerOrder
@using Microsoft.AspNetCore.Authorization
@attribute [Route($"{Common.Constants.ApiRoutes.CreateStoreCustomerOrder}/Store/{{StoreId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @nameof(Common.Constants.ApiRoutes.CreateStoreCustomerOrder)
</PageTitle>

<h3>
    @nameof(Common.Constants.ApiRoutes.CreateStoreCustomerOrder)
</h3>

<EditForm FormName="frmCreateStoreCustomerOrder" Model="CreateStoreCustomerOrderModel"
          OnValidSubmit="OnValidSubmitAsync">
    <div class="mb-3">
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    @if (this.MyStoreCustomerList?.Length > 0)
    {
        <div class="mb-3">
            <InputSelect class="form-select" @bind-Value="this.CreateStoreCustomerOrderModel!.StoreCustomerId">
                <option value="">Select your customer</option>
                @foreach (var singleStorecustomer in this.MyStoreCustomerList)
                {
                    <option value="@singleStorecustomer.StoreCustomerId">
                        @singleStorecustomer.Firstname @singleStorecustomer.Lastname @singleStorecustomer.Surname
                    </option>
                }
            </InputSelect>
        </div>
    }
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerOrderModel.OrderSubTotal)</label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.OrderSubTotal</label>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerOrderModel.TaxTotal)</label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.TaxTotal</label>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerOrderModel.OrderTotal)</label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.OrderTotal</label>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public long StoreId { get; set; }
    [SupplyParameterFromForm]
    private CreateStoreCustomerOrderModel? CreateStoreCustomerOrderModel { get; set; } = new();
    [Inject]
    private IStoreCustomerService? StoreCustomerService { get; set; }
    [Inject]
    private IStoreCustomerOrderService? StoreCustomerOrderService { get; set; }
    private StoreCustomerModel[]? MyStoreCustomerList;
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        this.MyStoreCustomerList = await this.StoreCustomerService!
        .GetMyStoreCustomerListAsync(this.StoreId, CancellationToken.None);
        this.IsBusy = false;
    }

    private async Task OnValidSubmitAsync()
    {
        this.IsBusy = true;
        await this.StoreCustomerOrderService!
        .CreateStoreCustomerOrderAsync(this.CreateStoreCustomerOrderModel!, CancellationToken.None);
        this.IsBusy = false;
    }
}
