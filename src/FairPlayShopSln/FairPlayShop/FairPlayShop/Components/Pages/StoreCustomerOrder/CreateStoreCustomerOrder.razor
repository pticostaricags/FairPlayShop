@using Blazored.Toast.Services
@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Product
@using FairPlayShop.Models.Store
@using FairPlayShop.Models.StoreCustomer
@using FairPlayShop.Models.StoreCustomerOrder
@using FairPlayShop.Models.StoreCustomerOrderDetail
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@attribute [Route($"{Common.Constants.ApiRoutes.CreateStoreCustomerOrder}/Store/{{StoreId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @Localizer![CreateStoreCustomerOrderTextKey]
</PageTitle>

<h3>
    @Localizer![CreateStoreCustomerOrderTextKey]
</h3>

<EditForm FormName="frmCreateStoreCustomerOrder" Model="CreateStoreCustomerOrderModel"
          OnValidSubmit="OnValidSubmitAsync">
    <div class="mb-3">
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    @if (this.MyStoreCustomerList?.Length > 0)
    {
        <div class="mb-3">
            <InputSelect class="form-select" @bind-Value="this.CreateStoreCustomerOrderModel!.StoreCustomerId">
                <option value="">@Localizer![SelectCustomerTextKey]</option>
                @foreach (var singleStorecustomer in this.MyStoreCustomerList)
                {
                    <option value="@singleStorecustomer.StoreCustomerId">
                        @singleStorecustomer.Name @singleStorecustomer.FirstSurname @singleStorecustomer.SecondSurname
                    </option>
                }
            </InputSelect>
        </div>
    }
    @if (this.CreateStoreCustomerOrderModel!.CreateStoreCustomerOrderDetailModel != null)
    {
        <div class="row">
            <div class="col">@(DisplayHelper.DisplayFor<ProductModel>(p => p.Name!))</div>
            <div class="col">@(DisplayHelper.DisplayFor<CreateStoreCustomerOrderDetailModel>(p => p.UnitPrice!))</div>
            <div class="col">@(DisplayHelper.DisplayFor<CreateStoreCustomerOrderDetailModel>(p => p.Quantity!))</div>
            <div class="col">@(DisplayHelper.DisplayFor<CreateStoreCustomerOrderDetailModel>(p => p.LineTotal!))</div>
        </div>
        foreach (var singleOrderLine in this.CreateStoreCustomerOrderModel.CreateStoreCustomerOrderDetailModel)
        {
            <div class="row">
                <div class="col">
                    <InputSelect class="form-select"
                                 ValueExpression="@(()=>singleOrderLine.ProductId)"
                                 Value="@singleOrderLine.ProductId"
                                 ValueChanged="@( (long? selectedValue) => OnOrderLineProductSelectionChanged(selectedValue, singleOrderLine))">
                        <option value="">@Localizer![SelectProductTextKey]</option>
                        @if (this.MyStoreProducts?.Length > 0)
                        {
                            @foreach (var singleStoreProduct in this.MyStoreProducts)
                            {
                                <option value="@singleStoreProduct.ProductId">@singleStoreProduct.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=> singleOrderLine.ProductId)"></ValidationMessage>
                </div>
                <div class="col">
                    <label class="form-label">@singleOrderLine.UnitPrice</label>
                </div>
                <div class="col">
                    <InputNumber class="form-control" @bind-Value="@singleOrderLine.Quantity"></InputNumber>
                    <ValidationMessage For="@(()=>singleOrderLine.Quantity)"></ValidationMessage>
                </div>
                <div class="col">
                    <label class="form-label">@singleOrderLine.LineTotal</label>
                </div>
            </div>
        }
    }
    <div class="mb-3">
        <label class="form-label">
            <strong>
                @(DisplayHelper.DisplayFor<CreateStoreCustomerOrderModel>(p=>p.OrderSubTotal))
            </strong>
        </label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.OrderSubTotal</label>
    </div>
    <div class="mb-3">
        <label class="form-label">
            <strong>
                @(DisplayHelper.DisplayFor<CreateStoreCustomerOrderModel>(p => p.TaxTotal))
            </strong>
        </label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.TaxTotal</label>
    </div>
    <div class="mb-3">
        <label class="form-label">
            <strong>
                @(DisplayHelper.DisplayFor<CreateStoreCustomerOrderModel>(p => p.OrderTotal))
            </strong>
        </label>
        <label class="form-label">@CreateStoreCustomerOrderModel!.OrderTotal</label>
    </div>
    <div class="mb-3">
        <button class="btn btn-secondary" type="button" @onclick="OnAddOrderLineClicked">
            @Localizer![AddOrderLineTextKey]
        </button>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary">
            @CustomLocalization.GlobalKeysLocalizer.SaveText
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public long StoreId { get; set; }
    [SupplyParameterFromForm]
    private CreateStoreCustomerOrderModel? CreateStoreCustomerOrderModel { get; set; } = new CreateStoreCustomerOrderModel()
        {
            CreateStoreCustomerOrderDetailModel = new List<CreateStoreCustomerOrderDetailModel>()
        };
    [Inject]
    private IStoreCustomerService? StoreCustomerService { get; set; }
    [Inject]
    private IStoreCustomerOrderService? StoreCustomerOrderService { get; set; }
    [Inject]
    private IProductService? ProductService { get; set; }
    [Inject]
    private IToastService? ToastService { get; set; }
    [Inject]
    private IStringLocalizer<CreateStoreCustomerOrder>? Localizer { get; set; }
    private StoreCustomerModel[]? MyStoreCustomerList;
    private ProductModel[]? MyStoreProducts { get; set; }
    private bool IsBusy { get; set; }
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        this.MyStoreCustomerList = await this.StoreCustomerService!
        .GetMyStoreCustomerListAsync(this.StoreId, CancellationTokenSource.Token);
        this.MyStoreProducts = await this.ProductService!.GetAllMyStoreProductListInStockAsync(this.StoreId,
        CancellationTokenSource.Token);
        this.IsBusy = false;
    }

    private async Task OnValidSubmitAsync()
    {
        this.IsBusy = true;
        try
        {
            await this.StoreCustomerOrderService!
            .CreateStoreCustomerOrderAsync(this.CreateStoreCustomerOrderModel!, CancellationTokenSource.Token);
        }
        catch (Exception ex)
        {
            this.ToastService!.ShowError(ex.Message);
        }
        this.IsBusy = false;
    }

    private void OnAddOrderLineClicked()
    {
        this.CreateStoreCustomerOrderModel!.CreateStoreCustomerOrderDetailModel!.Add(new CreateStoreCustomerOrderDetailModel());
    }

    private void OnOrderLineProductSelectionChanged(long? selectedProductId,
        CreateStoreCustomerOrderDetailModel selectedOrderLine)
    {
        if (selectedProductId.HasValue)
        {
            var selectedProduct = this.MyStoreProducts!.Single(p => p.ProductId ==
            selectedProductId);
            selectedOrderLine.UnitPrice = selectedProduct.SellingPrice;
        }
        else
        {
            selectedOrderLine.UnitPrice = null;
        }
        selectedOrderLine.ProductId = selectedProductId;
    }

    [ResourceKey(defaultValue: "Create Store Customer Order")]
    public const string CreateStoreCustomerOrderTextKey = "CreateStoreCustomerOrderText";
    [ResourceKey(defaultValue: "Select your customer")]
    public const string SelectCustomerTextKey = "SelectCustomerText";
    [ResourceKey(defaultValue: "Select a product")]
    public const string SelectProductTextKey = "SelectProductText";
    [ResourceKey(defaultValue: "Add Order Line")]
    public const string AddOrderLineTextKey = "AddOrderLineText";
}
