@using Blazored.Toast.Services
@using FairPlayShop.Common.Enums
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.Country
@using FairPlayShop.Models.Product
@using FairPlayShop.Models.StoreCustomer
@using Microsoft.AspNetCore.Authorization
@attribute [Route($"{Common.Constants.ApiRoutes.CreateMyStoreCustomer}/Store/{{StoreId:long}}")]
@attribute [Route($"{Common.Constants.ApiRoutes.CreateMyStoreCustomer}/Store/{{StoreId:long}}/Customer/{{CustomerId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @nameof(Common.Constants.ApiRoutes.CreateMyStoreCustomer)
</PageTitle>
<h3>
    @nameof(Common.Constants.ApiRoutes.CreateMyStoreCustomer)
</h3>

<EditForm FormName="frmCreateStoreCustomer" Model="@this.CreateStoreCustomerModel"
          OnValidSubmit="OnValidSubmitAsync" Enhance>
    <div class="mb-3">
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
    </div>
    <div class="mb-3">
        <h3>Customer Info</h3>
        <label class="form-label">@nameof(CreateStoreCustomerModel.Firstname)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.Firstname"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.Firstname)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.Lastname)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.Lastname"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.Lastname)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.Surname)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.Surname"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.Surname)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.EmailAddress)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.EmailAddress"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.EmailAddress)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.PhoneNumber)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.PhoneNumber"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.PhoneNumber)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <h3>Customer Address</h3>
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Firstname)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.Firstname"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Firstname)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Lastname)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.Lastname"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Lastname)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Company)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.Company"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.Company)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.AddressLine1)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.AddressLine1"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.AddressLine1)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.AddressLine2)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.AddressLine2"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.AddressLine2)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.PhoneNumber)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.PhoneNumber"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.PhoneNumber)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateStoreCustomerModel.CreateStoreCustomerAddressModel.PostalCode)</label>
        <InputText class="form-control" @bind-Value="@CreateStoreCustomerModel!.CreateStoreCustomerAddressModel!.PostalCode"></InputText>
        <ValidationMessage For="@( () => CreateStoreCustomerModel.CreateStoreCustomerAddressModel.PostalCode)"></ValidationMessage>
    </div>
    @if (this.CountryList != null)
    {
        <div class="mb-3">
            <label class="form-label">Country</label>
            <InputSelect class="form-select" @bind-Value="SelectedCountryId">
                <option value="">Select a Country</option>
                @foreach (var singleCountry in this.CountryList)
                {
                    <option value="@singleCountry.CountryId">@singleCountry.Name</option>
                }
            </InputSelect>
        </div>
    }
    <div class="mb-3">
        <button class="btn btn-primary" type="submit">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public long StoreId { get; set; }
    [Parameter]
    public long? CustomerId { get; set; }
    [Inject]
    private IToastService? ToastService { get; set; }
    [Inject]
    private IStoreCustomerService? StoreCustomerService { get; set; }
    [Inject]
    private ICountryService? CountryService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [SupplyParameterFromForm]
    private CreateStoreCustomerModel? CreateStoreCustomerModel { get; set; } = new CreateStoreCustomerModel()
        {
            CreateStoreCustomerAddressModel = new Models.StoreCustomerAddress.CreateStoreCustomerAddressModel()
        };
    private bool IsBusy { get; set; }
    private int? SelectedCountryId { get; set; }
    private CountryModel[]? CountryList { get; set; }
    protected override async Task OnInitializedAsync()
    {
        this.CountryList = await this.CountryService!.GetCountryListAsync(CancellationToken.None);
        if (this.CreateStoreCustomerModel != null)
        {
            this.CreateStoreCustomerModel.StoreId = this.StoreId;
            if (this.CustomerId != null)
            {
                StoreCustomerModel storeCustomerModel = await this.StoreCustomerService!.GetMyStoreCustomerAsync(this.CustomerId.Value, CancellationToken.None);
                this.CreateStoreCustomerModel!.PhoneNumber = storeCustomerModel.PhoneNumber;
                this.CreateStoreCustomerModel.Firstname = storeCustomerModel.Firstname;
                this.CreateStoreCustomerModel.Lastname = storeCustomerModel.Lastname;
                this.CreateStoreCustomerModel.Surname = storeCustomerModel.Surname;
                this.CreateStoreCustomerModel.EmailAddress = storeCustomerModel.EmailAddress;
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        this.IsBusy = true;
        await this.StoreCustomerService!.CreateMyStoreCustomerAsync(this.CreateStoreCustomerModel!, CancellationToken.None);
        this.IsBusy = false;
        this.ToastService!.ShowSuccess(message: "Your customer has been saved");
        NavigationManager!.NavigateTo($"{Common.Constants.ApiRoutes.MyStoreCustomerList}/Store/{StoreId}");
    }
}
