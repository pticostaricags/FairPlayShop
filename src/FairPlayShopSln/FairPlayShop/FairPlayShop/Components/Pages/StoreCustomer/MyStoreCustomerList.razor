@using FairPlayShop.Common.CustomAttributes
@using FairPlayShop.Interfaces.Services
@using FairPlayShop.Models.StoreCustomer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@attribute [Route($"{Common.Constants.ApiRoutes.MyStoreCustomerList}/Store/{{StoreId:long}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<PageTitle>
    @Localizer![MyStoreCustomerListTextKey]
</PageTitle>

<h3>
    @Localizer![MyStoreCustomerListTextKey]
</h3>

@if (this.MyStoreCustomers != null)
{
    <div class="grid-container">
        <QuickGrid Items="this.MyStoreCustomers">
            <PropertyColumn Title="@Localizer![StoreCustomerIdTextKey]" Property="@( p=> p.StoreCustomerId)" Sortable="true"></PropertyColumn>
            <PropertyColumn Title="@Localizer![NameTextKey]" Property="@( p=> p.Name)" Sortable="true"></PropertyColumn>
            <PropertyColumn Title="@Localizer![FirstSurnameTextKey]" Property="@( p=> p.FirstSurname)" Sortable="true"></PropertyColumn>
            <PropertyColumn Title="@Localizer![SecondSurnameTextKey]" Property="@( p=> p.SecondSurname)" Sortable="true"></PropertyColumn>
            <PropertyColumn Title="@Localizer![EmailAddressTextKey]" Property="@( p=> p.EmailAddress)" Sortable="true"></PropertyColumn>
            <PropertyColumn Title="@Localizer![PhoneNumberTextKey]" Property="@( p=> p.PhoneNumber)" Sortable="true"></PropertyColumn>
            <TemplateColumn>
                <button class="btn btn-danger" type="button" @onclick="@( async () => await OnDeleteCustomerAsync(context.StoreCustomerId))">@Localizer![DeleteTextKey]</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@code {
    [Parameter]
    public long StoreId { get; set; }
    [Inject]
    private IStoreCustomerService? StoreCustomerService { get; set; }
    [Inject]
    private IStringLocalizer<MyStoreCustomerList>? Localizer { get; set; }
    private IQueryable<StoreCustomerModel>? MyStoreCustomers { get; set; }
    private bool IsBusy { get; set; }
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        await LoadDataAsync();
        this.IsBusy = false;
    }

    private async Task LoadDataAsync()
    {
        this.MyStoreCustomers =
        (await this.StoreCustomerService!.GetMyStoreCustomerListAsync(this.StoreId!, CancellationTokenSource.Token))?
        .AsQueryable();
    }

    private async Task OnDeleteCustomerAsync(long storeCustomerId)
    {
        this.IsBusy = true;
        await this.StoreCustomerService!.DeleteMyStoreCustomerAsync(storeCustomerId, CancellationTokenSource.Token);
        await LoadDataAsync();
        this.IsBusy = false;
    }

    [ResourceKey(defaultValue: "My Store Customer List")]
    public const string MyStoreCustomerListTextKey = "MyStoreCustomerListText";
    [ResourceKey(defaultValue: "Store Customer Id")]
    public const string StoreCustomerIdTextKey = "StoreCustomerIdText";
    [ResourceKey(defaultValue: "Name")]
    public const string NameTextKey = "NameText";
    [ResourceKey(defaultValue: "First Surname")]
    public const string FirstSurnameTextKey = "FirstSurnameText";
    [ResourceKey(defaultValue: "Second Surname")]
    public const string SecondSurnameTextKey = "SecondSurnameText";
    [ResourceKey(defaultValue: "Email Address")]
    public const string EmailAddressTextKey = "EmailAddressText";
    [ResourceKey(defaultValue: "Phone Number")]
    public const string PhoneNumberTextKey = "PhoneNumberText";
    [ResourceKey(defaultValue: "Delete")]
    public const string DeleteTextKey = "DeleteText";
}
